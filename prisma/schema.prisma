generator erd {
  provider = "prisma-erd-generator"
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  user_id              Int             @id @default(autoincrement())
  username             String          @unique @db.VarChar(255)
  email                String          @unique @db.VarChar(255)
  password_hash        String
  created_at           DateTime        @default(now()) @db.Timestamptz(3)
  is_public_profile    Boolean         @default(true)
  current_character_id Int?
  onboarding_answers   Json?
  assets               Int[]           @default([])
  points               Int             @default(0)
  title                String          @default("üå± Ï¥àÎ≥¥ ÌÉêÌóòÍ∞Ä (Lv.1)")
  total_points_earned  Int             @default(0)
  is_admin             Boolean         @default(false)

  // Relations
  journeys             Journey[]
  likes                Like[]
  locationLikes        LocationLike[]
  logbookEntries       LogbookEntry[]
  quests               Quest[]
  reviews              Review[]
  scraps               Scrap[]

  // current selected character
  currentCharacter     Character?      @relation("CurrentUserCharacter", fields: [current_character_id], references: [character_id])

  // owned/unlocked characters
  characters           UserCharacter[]
}

model Character {
  character_id   Int             @id @default(autoincrement())
  character_name String          @db.VarChar(255)
  description    String?
  image_url      String?         @db.VarChar(255)

  // reverse side of user's current character
  currentUsers   User[]          @relation("CurrentUserCharacter")

  // users who own this character
  users          UserCharacter[]
}

model UserCharacter {
  user_id      Int
  character_id Int

  character    Character @relation(fields: [character_id], references: [character_id], onDelete: Cascade)
  user         User      @relation(fields: [user_id], references: [user_id], onDelete: Cascade)

  @@id([user_id, character_id])
  @@index([user_id])
  @@index([character_id])
}

model Asset {
  asset_id  Int    @id @default(autoincrement())
  name      String
  image_url String?
  type      Int
}

model Quest {
  quest_id      Int     @id @default(autoincrement())
  user_id       Int
  is_main_quest Boolean @default(false)
  is_completed  Boolean @default(false)
  reward_points Int     @default(0)
  title         String

  user          User    @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
}

model Location {
  location_id        Int               @id @default(autoincrement())
  location_name      String
  address            String?
  latitude           Decimal?          @db.Decimal(9, 6)
  longitude          Decimal?          @db.Decimal(9, 6)
  category           String?
  is_solo_friendly   Boolean           @default(true)
  description        String?
  created_at         DateTime          @default(now()) @db.Timestamptz(3)
  dedupe_signature   String?           @unique
  features           Json?
  keywords           String[]
  price_level        Int?
  rating_avg         Decimal?          @db.Decimal(3, 2)
  rating_count       Int?
  updated_at         DateTime          @updatedAt
  opening_hours      Json?
  features_flat      String[]          @default([])
  fallback_photo_url String?
  google_place_id    String?           @unique
  photo_attribution  Json?
  photo_reference    String?
  thumbnail_url      String?

  // Relations
  journeys           JourneyLocation[]
  likesByUsers       LocationLike[]
  photos             LocationPhoto[]
  reviews            Review[]

  @@index([latitude, longitude])
}

model LocationLike {
  like_id     Int      @id @default(autoincrement())
  user_id     Int
  location_id Int
  created_at  DateTime @default(now()) @db.Timestamptz(3)

  location    Location @relation(fields: [location_id], references: [location_id], onDelete: Cascade)
  user        User     @relation(fields: [user_id], references: [user_id], onDelete: Cascade)

  @@unique([user_id, location_id])
  @@index([user_id])
  @@index([location_id])
}

model LocationPhoto {
  id              Int      @id @default(autoincrement())
  location_id     Int
  position        Int
  width           Int?
  height          Int?
  photo_reference String
  attributions    String[]
  remote_url      String?
  created_at      DateTime @default(now()) @db.Timestamptz(3)
  updated_at      DateTime @updatedAt

  location        Location @relation(fields: [location_id], references: [location_id], onDelete: Cascade)

  @@unique([location_id, position])
  @@index([location_id])
}

model Journey {
  journey_id      Int               @id @default(autoincrement())
  user_id         Int
  journey_title   String
  created_at      DateTime          @default(now()) @db.Timestamptz(3)
  tags            String[]
  journey_summary String?

  user            User              @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  locations       JourneyLocation[]
  logbookEntries  LogbookEntry[]
}

model JourneyLocation {
  journey_location_id Int      @id @default(autoincrement())
  journey_id          Int
  location_id         Int
  sequence_number     Int

  journey             Journey  @relation(fields: [journey_id], references: [journey_id], onDelete: Cascade)
  location            Location @relation(fields: [location_id], references: [location_id], onDelete: Cascade)

  @@index([journey_id])
  @@index([location_id])
}

model LogbookEntry {
  logbook_id    Int       @id @default(autoincrement())
  user_id       Int
  journey_id    Int?

  // Ïó¨Îü¨ Ïû•ÏÜåÎ•º Î∞∞Ïó¥Î°ú Î≥¥Í¥Ä (FK ÏóÜÏùå)
  location_ids  Int[]     @default([])

  entry_title   String
  entry_content String?
  is_public     Boolean   @default(true)
  created_at    DateTime  @default(now()) @db.Timestamptz(3)
  image_urls    Json?

  // Relations
  likes         Like[]
  journey       Journey?  @relation(fields: [journey_id], references: [journey_id])
  user          User      @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  review        Review[]
  scraps        Scrap[]

  @@index([user_id])
  @@index([journey_id])
}

model Like {
  like_id      Int          @id @default(autoincrement())
  logbook_id   Int
  user_id      Int
  created_at   DateTime     @default(now()) @db.Timestamptz(3)

  logbookEntry LogbookEntry @relation(fields: [logbook_id], references: [logbook_id], onDelete: Cascade)
  user         User         @relation(fields: [user_id], references: [user_id], onDelete: Cascade)

  @@unique([logbook_id, user_id])
  @@index([logbook_id])
  @@index([user_id])
}

model Scrap {
  scrap_id     Int          @id @default(autoincrement())
  logbook_id   Int
  user_id      Int
  created_at   DateTime     @default(now()) @db.Timestamptz(3)

  logbookEntry LogbookEntry @relation(fields: [logbook_id], references: [logbook_id], onDelete: Cascade)
  user         User         @relation(fields: [user_id], references: [user_id], onDelete: Cascade)

  @@unique([logbook_id, user_id])
  @@index([logbook_id])
  @@index([user_id])
}

model Review {
  review_id   Int          @id @default(autoincrement())
  user_id     Int
  location_id Int
  logbook_id  Int
  rating      Int
  content     Json
  created_at  DateTime     @default(now()) @db.Timestamptz(3)
  updated_at  DateTime     @updatedAt

  location    Location     @relation(fields: [location_id], references: [location_id], onDelete: Cascade)
  logbook     LogbookEntry @relation(fields: [logbook_id], references: [logbook_id], onDelete: Cascade)
  user        User         @relation(fields: [user_id], references: [user_id], onDelete: Cascade)

  @@unique([logbook_id, location_id])
  @@index([user_id])
  @@index([location_id])
  @@index([logbook_id])
}
